import { type FetchWithTimeoutOptions } from '../../utils/fetch-with-timeout';
import type { Response } from 'node-fetch';
import type { ReadStream } from 'fs';
import type { ListRemotesResponse, PushResponse, UpsertRemoteResponse } from './types';
export declare class ReuniteApiError extends Error {
    status: number;
    constructor(message: string, status: number);
}
declare class ReuniteBaseApiClient {
    protected version: string;
    protected command: string;
    constructor(version: string, command: string);
    protected getParsedResponse<T>(response: Response): Promise<T>;
    protected request(url: string, options: FetchWithTimeoutOptions): Promise<Response>;
}
declare class RemotesApiClient extends ReuniteBaseApiClient {
    private readonly domain;
    private readonly apiKey;
    constructor(domain: string, apiKey: string, version: string, command: string);
    getDefaultBranch(organizationId: string, projectId: string): Promise<string>;
    upsert(organizationId: string, projectId: string, remote: {
        mountPath: string;
        mountBranchName: string;
    }): Promise<UpsertRemoteResponse>;
    push(organizationId: string, projectId: string, payload: PushPayload, files: {
        path: string;
        stream: ReadStream | Buffer;
    }[]): Promise<PushResponse>;
    getRemotesList({ organizationId, projectId, mountPath, }: {
        organizationId: string;
        projectId: string;
        mountPath: string;
    }): Promise<ListRemotesResponse>;
    getPush({ organizationId, projectId, pushId, }: {
        organizationId: string;
        projectId: string;
        pushId: string;
    }): Promise<PushResponse>;
}
export declare class ReuniteApiClient {
    remotes: RemotesApiClient;
    constructor({ domain, apiKey, version, command, }: {
        domain: string;
        apiKey: string;
        version: string;
        command: 'push' | 'push-status';
    });
}
export type PushPayload = {
    remoteId: string;
    commit: {
        message: string;
        branchName: string;
        sha?: string;
        url?: string;
        createdAt?: string;
        namespace?: string;
        repository?: string;
        author: {
            name: string;
            email: string;
            image?: string;
        };
    };
    isMainBranch?: boolean;
};
export {};
