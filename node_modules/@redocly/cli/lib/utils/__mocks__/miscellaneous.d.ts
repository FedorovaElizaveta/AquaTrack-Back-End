export declare const getFallbackApisOrExit: jest.Mock<any, [entrypoints: any]>;
export declare const dumpBundle: jest.Mock<string, []>;
export declare const slash: jest.Mock<any, any>;
export declare const pluralize: jest.Mock<any, any>;
export declare const getExecutionTime: jest.Mock<any, any>;
export declare const printExecutionTime: jest.Mock<any, any>;
export declare const printUnusedWarnings: jest.Mock<any, any>;
export declare const printLintTotals: jest.Mock<any, any>;
export declare const getOutputFileName: jest.Mock<{
    outputFile: string;
    ext: string;
}, []>;
export declare const handleError: jest.Mock<any, any>;
export declare const exitWithError: jest.Mock<any, any>;
export declare const writeYaml: jest.Mock<any, any>;
export declare const loadConfigAndHandleErrors: jest.Mock<{
    configFile: null;
    styleguide: {
        addIgnore: jest.Mock<any, any>;
        skipRules: jest.Mock<any, any>;
        skipPreprocessors: jest.Mock<any, any>;
        saveIgnore: jest.Mock<any, any>;
        skipDecorators: jest.Mock<any, any>;
        ignore: null;
        decorators: {
            oas2: {};
            oas3_0: {};
            oas3_1: {};
        };
        preprocessors: {
            oas2: {};
            oas3_0: {};
            oas3_1: {};
        };
    };
}, []>;
export declare const checkIfRulesetExist: jest.Mock<any, any>;
export declare const sortTopLevelKeysForOas: jest.Mock<any, [document: any]>;
export declare const getAndValidateFileExtension: jest.Mock<string | undefined, [fileName: string]>;
export declare const writeToFileByExtension: jest.Mock<any, any>;
export declare const checkForDeprecatedOptions: jest.Mock<any, any>;
export declare const saveBundle: jest.Mock<any, any>;
